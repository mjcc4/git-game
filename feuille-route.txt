Feuille de route

0. Démarrer le projet ExpressJS
Il contient une ressource /welcome qui dit bienvenue

1. 1er exo : commiter sa description de profil dans /equipe (chaque dev commit des fichiers différents)

2. Chaque dev doit créer une ressource /welcome/devX qui renvoie Bienvenue DEVX !
Ca permettra d'initier les gens à une 1ere resolution de conflit

3. Refaire la même chose avec des branches (1 branche diffrente par dev par ex.)
On voit que le comportement des résolution de conflit sera le même car Git a manipulé 
"differentes branches master".

II. Le Git workflow
Pas trouvé comment simuler une intégration continue
A la place, on va simuler une problématique avec des partenaires imaginaires pour la ressource panier.
Au début, on crée une resource avec le json panier1.
On a maintenant besoin d'une resource différente, 
mais on veut garder un environnement avec panier1 opérationnel pour corriger les anos de prod
et en attendant que le partenaire soit pret.

Exo par exemple :
Ano de prod : on a oublié les patates ! Il faut ajouter une resource patate entre carotte et chaussure dans le panier
Evol : en fait on veut plus nom, mais libelle (synchro partenaire)
Evol : doit faire une evol sur les nouveaux codes produit du panier (synchro partenaire)

Si on trouve tant mieux sinon tant pis : comment simuler une intégration continue

III. Réécrire l'histoire
Faire un commit boulet qui supprime tout
Exo : pousser un rollback

Facultatif selon timing
Faire un commit avec des merges pourris, histoire d'avoir un rollback de merge à faire
Constater que c'est galère car il faut rollback 2 fois

Présenter le reset --hard

Conventions sur le workflow de l'arbre
Ex : eviter les merges au sein de la meme branche

Pb : Comment éviter les merges auto quand on fait un pull
Soluce : Le rebase !
> priviliégier le pull rebase, ...

Egalement utile pour réécrire une branche ailleurs
